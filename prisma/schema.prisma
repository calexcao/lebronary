generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  category_links category_links[]
}

model books {
  id             Int              @id @default(autoincrement())
  isbn           String           @db.VarChar(13)
  name           String           @db.VarChar(255)
  description     String?         @db.Text
  author         String           @db.VarChar(80)
  copies         Int              @db.SmallInt
  is_active      Boolean          @default(true)
  publish_year   Int              @db.SmallInt
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  book_photos    book_photos[]
  borrowings     borrowings[]
  category_links category_links[]
  ratings        ratings[]
  reservations   reservations[]
  staff_picks    staff_picks[]
}

model category_links {
  book_id     Int
  category_id Int
  books       books      @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "category_links_ibfk_1")
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "category_links_ibfk_2")

  @@id([book_id, category_id])
  @@index([category_id], map: "category_id")
}

model activities {
  activity_id     Int               @id @default(autoincrement())
  title           String            @db.VarChar(255)
  description     String?           @db.Text
  date            DateTime          @db.Date
  start_time      String            @db.VarChar(10)
  end_time        String            @db.VarChar(10)
  age_group       String?           @db.VarChar(20)
  capacity        Int?
  photo_url       String?           @db.VarChar(1024)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  activity_photos activity_photos[]
}

model activity_photos {
  photo_id    Int        @id @default(autoincrement())
  activity_id Int
  url         String     @db.VarChar(1024)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  updated_at  DateTime?  @default(now()) @db.Timestamp(0)
  activities  activities @relation(fields: [activity_id], references: [activity_id], onDelete: Cascade, onUpdate: NoAction, map: "activity_photos_ibfk_1")

  @@index([activity_id], map: "activity_id")
}

model book_photos {
  photo_id   Int       @id @default(autoincrement())
  book_id    Int
  url        String    @db.VarChar(1024)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  books      books     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "book_photos_ibfk_1")

  @@index([book_id], map: "book_id")
}

model borrowings {
  borrowing_id Int      @id @default(autoincrement())
  book_id      Int
  user_id      String
  borrow_date  DateTime @db.Date
  due_date     DateTime @db.Date
  return_date  DateTime @db.Date
  books        books    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "borrowings_ibfk_1")
  users        users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "borrowings_ibfk_2")
  fines        fines[]

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model fines {
  fine_id      Int        @id @default(autoincrement())
  borrowing_id Int
  user_id      String
  amount       Decimal    @db.Decimal(10, 2)
  fine_date    DateTime   @db.Date
  paid_date    DateTime?  @db.Date
  borrowings   borrowings @relation(fields: [borrowing_id], references: [borrowing_id], onDelete: NoAction, onUpdate: NoAction, map: "fines_ibfk_1")
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fines_ibfk_2")

  @@index([borrowing_id], map: "borrowing_id")
  @@index([user_id], map: "user_id")
}

model ratings {
  rating_id  Int      @id @default(autoincrement())
  book_id    Int
  user_id    String
  rating     Int      @db.TinyInt
  review     String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  books      books    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_1")
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model reservations {
  reservation_id Int      @id @default(autoincrement())
  book_id        Int
  user_id        String
  date           DateTime @db.Date
  expiration     DateTime @db.Date
  books          books    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservations_ibfk_1")
  users          users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservations_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model staff_picks {
  pick_id Int      @id @default(autoincrement())
  book_id Int
  user_id String
  date    DateTime @db.Date
  books   books    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_picks_ibfk_1")

  @@index([book_id], map: "book_id")
}

model users {
  id           String         @id @default(cuid())
  email        String         @unique(map: "email") @db.VarChar(100)
  name         String         @db.VarChar(80)
  image        String         @db.VarChar(190)
  password     String         @db.VarChar(100)
  card         String         @db.VarChar(10)
  status       String?        @db.VarChar(10)
  role         String         @db.VarChar(10)
  is_active    Boolean        @default(true)
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @db.Timestamp(0)
  last_login   DateTime?      @db.Timestamp(0)
  borrowings   borrowings[]
  fines        fines[]
  ratings      ratings[]
  reservations reservations[]
}
